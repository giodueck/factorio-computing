import zlib
import base64

# 32x64-value cell ROM, for loading into 64-value cell RAM module
rom_bp_placeholder = lambda i: str((i + 10000) * 1000 + 123)
rom_bp_capacity = 1024
rom_bp_string = ''


def generate_bp(program: list[int], placeholder_list) -> str:
    length = rom_bp_capacity
    while len(program) < length:
        program.append(0)

    b64_string = rom_bp_string[1:]
    bin_string = base64.b64decode(bytes(b64_string, 'utf-8'))

    json = zlib.decompress(bin_string)
    t = str(json)[2:-1]

    for i in range(length):
        t = t.replace(placeholder_list[i], str(program[i]), 1)

    z = zlib.compress(bytes(t, 'utf-8'), level=9)
    b = '0' + str(base64.b64encode(z))[2:-1]

    return b

if __name__ == '__main__':
    program = [(i + 10000 + 1024) * 1000 + 123 for i in range(rom_bp_capacity)]
    placeholder_list = [rom_bp_placeholder(i) for i in range(rom_bp_capacity)]
    # print(placeholder_list)
    
    print(generate_bp(program, placeholder_list))
